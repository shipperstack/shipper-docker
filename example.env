##########
# Django #
##########

# Secret key used for internal Django operations
# Generate one with the following command:
# python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'
SHIPPER_SECRET_KEY="duk4hvedu3zxnmw@shnjw7z^)x#wcm@cj05t5f&#90rx-g44d2"

# Debug mode
# 0 to disable, 1 to enable
# Do not enable in production!
SHIPPER_DEBUG=0

# Hostnames that are allowed to connect
# Separate multiple entries with spaces
# Do not use wildcard hostnames in production as it can be a security risk!
# Note: you must include localhost or the built-in health-check in nginx will fail
SHIPPER_ALLOWED_HOSTS="localhost 127.0.0.1 [::1]"

# Trusted origins for CSRF validation
# Must contain the schema (HTTP or HTTPS)
# Separate multiple entries with spaces
SHIPPER_CSRF_TRUSTED_ORIGINS="https://downloads.example.com"

# Internal Django security options
# 0 to disable, 1 to enable (default enabled)
SHIPPER_CSRF_COOKIE_SECURE=1
SHIPPER_SESSION_COOKIE_SECURE=1

# HSTS configuration
# If enabled, only allows HTTPS traffic
# 0 to disable, any other value in seconds to enable (HSTS duration)
# Warning: if you set up HSTS but not HTTPS you will be unable to access the instance
SHIPPER_SECURE_HSTS_SECONDS=0


##########
# Upload #
##########

# Checksum type to use during upload validation
# Supported types: 'md5', 'sha256'
SHIPPER_UPLOAD_CHECKSUM="sha256"


############
# Database #
############

# Sets the SQL engine that Django uses
# Supported values: 'django.db.backends.postgresql' (PostgreSQL), 'django.db.backends.sqlite3' (SQLite)
# Default is SQLite, remove entire line to set
SHIPPER_SQL_ENGINE=django.db.backends.postgresql

# Database name
# Warning: if you are using SQLite, you need to comment out this line!
SHIPPER_SQL_DATABASE=shipper

# Database username
SHIPPER_SQL_USER=user

# Database password
SHIPPER_SQL_PASSWORD=password

# Database host
SHIPPER_SQL_HOST=localhost

# Database host port
SHIPPER_SQL_PORT=5432


#########
# Cache #
#########

# Sets the cache backend that Django uses
# Supported values: `django.core.cache.backends.memcached.PyMemcacheCache` (Memcached), `django.core.cache.backends.locmem.LocMemCache` (local, per-process cache)
# Default is local, per-process cache
SHIPPER_CACHE_BACKEND=django.core.cache.backends.memcached.PyMemcacheCache

# Cache location
# If using Memcached, write down the address and port of the Memcached service
# If using local, per-process cache, give it a unique name like `shipper-cache`
SHIPPER_CACHE_LOCATION=localhost:11211


#########
# Email #
#########

# Sets the email backend that Django uses
# Supported values: 'django.core.mail.backends.smtp.EmailBackend' (SMTP email), 'django.core.mail.backends.console.EmailBackend' (Console-based email, for debugging)
# Warning: if set to console-based email, most of the other keys will not take effect
SHIPPER_EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend"

# Email (SMTP) host
SHIPPER_EMAIL_HOST="smtp.example.com"

# Email (SMTP) host port
SHIPPER_EMAIL_PORT=587

# Email (SMTP) username
SHIPPER_EMAIL_HOST_USER="testuser"

# Email (SMTP) password
SHIPPER_EMAIL_HOST_PASSWORD="hunter2"

# Email (SMTP) use TLS during connection
SHIPPER_EMAIL_USE_TLS=1

# Email (SMTP) default "from" header
SHIPPER_DEFAULT_FROM_EMAIL="Demo Team <noreply@example.com>"

# Administrator emails
# In the format NAME:EMAIL
# Separate multiple entries with semicolons
SHIPPER_ADMIN_EMAILS="Admin1:admin1@example.com;Admin2:admin2@example.com"


############################
# Sentry (error reporting) #
############################

# Sentry report URL
# Leave as-is to report to the default shipper Sentry instance (and help me catch bugs!)
SHIPPER_SENTRY_SDK_DSN="https://34fd99861ec84ad2bd731c50267dc5f6@o444286.ingest.sentry.io/5418995"

# Include PII (Personally-Identifiable Information) in the bug reports
# 0 to disable, any other value to enable
SHIPPER_SENTRY_SDK_PII=0
